/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.anand.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Employer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Employer\",\"namespace\":\"com.anand.avro\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"doj\",\"type\":\"string\"},{\"name\":\"location\",\"type\":\"string\"},{\"name\":\"city\",\"type\":[\"null\",\"string\"]},{\"name\":\"totalCount\",\"type\":\"int\"},{\"name\":\"avgSalary\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence doj;
  @Deprecated public java.lang.CharSequence location;
  @Deprecated public java.lang.CharSequence city;
  @Deprecated public int totalCount;
  @Deprecated public float avgSalary;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Employer() {}

  /**
   * All-args constructor.
   */
  public Employer(java.lang.CharSequence name, java.lang.CharSequence doj, java.lang.CharSequence location, java.lang.CharSequence city, java.lang.Integer totalCount, java.lang.Float avgSalary) {
    this.name = name;
    this.doj = doj;
    this.location = location;
    this.city = city;
    this.totalCount = totalCount;
    this.avgSalary = avgSalary;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return doj;
    case 2: return location;
    case 3: return city;
    case 4: return totalCount;
    case 5: return avgSalary;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: doj = (java.lang.CharSequence)value$; break;
    case 2: location = (java.lang.CharSequence)value$; break;
    case 3: city = (java.lang.CharSequence)value$; break;
    case 4: totalCount = (java.lang.Integer)value$; break;
    case 5: avgSalary = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'doj' field.
   */
  public java.lang.CharSequence getDoj() {
    return doj;
  }

  /**
   * Sets the value of the 'doj' field.
   * @param value the value to set.
   */
  public void setDoj(java.lang.CharSequence value) {
    this.doj = value;
  }

  /**
   * Gets the value of the 'location' field.
   */
  public java.lang.CharSequence getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(java.lang.CharSequence value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }

  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'totalCount' field.
   */
  public java.lang.Integer getTotalCount() {
    return totalCount;
  }

  /**
   * Sets the value of the 'totalCount' field.
   * @param value the value to set.
   */
  public void setTotalCount(java.lang.Integer value) {
    this.totalCount = value;
  }

  /**
   * Gets the value of the 'avgSalary' field.
   */
  public java.lang.Float getAvgSalary() {
    return avgSalary;
  }

  /**
   * Sets the value of the 'avgSalary' field.
   * @param value the value to set.
   */
  public void setAvgSalary(java.lang.Float value) {
    this.avgSalary = value;
  }

  /** Creates a new Employer RecordBuilder */
  public static com.anand.avro.Employer.Builder newBuilder() {
    return new com.anand.avro.Employer.Builder();
  }
  
  /** Creates a new Employer RecordBuilder by copying an existing Builder */
  public static com.anand.avro.Employer.Builder newBuilder(com.anand.avro.Employer.Builder other) {
    return new com.anand.avro.Employer.Builder(other);
  }
  
  /** Creates a new Employer RecordBuilder by copying an existing Employer instance */
  public static com.anand.avro.Employer.Builder newBuilder(com.anand.avro.Employer other) {
    return new com.anand.avro.Employer.Builder(other);
  }
  
  /**
   * RecordBuilder for Employer instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Employer>
    implements org.apache.avro.data.RecordBuilder<Employer> {

    private java.lang.CharSequence name;
    private java.lang.CharSequence doj;
    private java.lang.CharSequence location;
    private java.lang.CharSequence city;
    private int totalCount;
    private float avgSalary;

    /** Creates a new Builder */
    private Builder() {
      super(com.anand.avro.Employer.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.anand.avro.Employer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.doj)) {
        this.doj = data().deepCopy(fields()[1].schema(), other.doj);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.location)) {
        this.location = data().deepCopy(fields()[2].schema(), other.location);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.city)) {
        this.city = data().deepCopy(fields()[3].schema(), other.city);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.totalCount)) {
        this.totalCount = data().deepCopy(fields()[4].schema(), other.totalCount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.avgSalary)) {
        this.avgSalary = data().deepCopy(fields()[5].schema(), other.avgSalary);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Employer instance */
    private Builder(com.anand.avro.Employer other) {
            super(com.anand.avro.Employer.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.doj)) {
        this.doj = data().deepCopy(fields()[1].schema(), other.doj);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.location)) {
        this.location = data().deepCopy(fields()[2].schema(), other.location);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.city)) {
        this.city = data().deepCopy(fields()[3].schema(), other.city);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.totalCount)) {
        this.totalCount = data().deepCopy(fields()[4].schema(), other.totalCount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.avgSalary)) {
        this.avgSalary = data().deepCopy(fields()[5].schema(), other.avgSalary);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public com.anand.avro.Employer.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public com.anand.avro.Employer.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'doj' field */
    public java.lang.CharSequence getDoj() {
      return doj;
    }
    
    /** Sets the value of the 'doj' field */
    public com.anand.avro.Employer.Builder setDoj(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.doj = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'doj' field has been set */
    public boolean hasDoj() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'doj' field */
    public com.anand.avro.Employer.Builder clearDoj() {
      doj = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'location' field */
    public java.lang.CharSequence getLocation() {
      return location;
    }
    
    /** Sets the value of the 'location' field */
    public com.anand.avro.Employer.Builder setLocation(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.location = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'location' field has been set */
    public boolean hasLocation() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'location' field */
    public com.anand.avro.Employer.Builder clearLocation() {
      location = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'city' field */
    public java.lang.CharSequence getCity() {
      return city;
    }
    
    /** Sets the value of the 'city' field */
    public com.anand.avro.Employer.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.city = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'city' field has been set */
    public boolean hasCity() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'city' field */
    public com.anand.avro.Employer.Builder clearCity() {
      city = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'totalCount' field */
    public java.lang.Integer getTotalCount() {
      return totalCount;
    }
    
    /** Sets the value of the 'totalCount' field */
    public com.anand.avro.Employer.Builder setTotalCount(int value) {
      validate(fields()[4], value);
      this.totalCount = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'totalCount' field has been set */
    public boolean hasTotalCount() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'totalCount' field */
    public com.anand.avro.Employer.Builder clearTotalCount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'avgSalary' field */
    public java.lang.Float getAvgSalary() {
      return avgSalary;
    }
    
    /** Sets the value of the 'avgSalary' field */
    public com.anand.avro.Employer.Builder setAvgSalary(float value) {
      validate(fields()[5], value);
      this.avgSalary = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'avgSalary' field has been set */
    public boolean hasAvgSalary() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'avgSalary' field */
    public com.anand.avro.Employer.Builder clearAvgSalary() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Employer build() {
      try {
        Employer record = new Employer();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.doj = fieldSetFlags()[1] ? this.doj : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.location = fieldSetFlags()[2] ? this.location : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.city = fieldSetFlags()[3] ? this.city : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.totalCount = fieldSetFlags()[4] ? this.totalCount : (java.lang.Integer) defaultValue(fields()[4]);
        record.avgSalary = fieldSetFlags()[5] ? this.avgSalary : (java.lang.Float) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
